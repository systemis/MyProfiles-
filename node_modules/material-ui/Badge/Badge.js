'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.styleSheet = undefined;

var _assign = require('object-assign');

var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Badge;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _jssThemeReactor = require('jss-theme-reactor');

var _customPropTypes = require('../utils/customPropTypes');

var _customPropTypes2 = _interopRequireDefault(_customPropTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } //  weak

var radius = 12;
var radius2x = 2 * radius;

var styleSheet = exports.styleSheet = (0, _jssThemeReactor.createStyleSheet)('MuiBadge', function (theme) {
  var typography = theme.typography,
      palette = theme.palette;


  return {
    root: {
      position: 'relative',
      display: 'inline-block'
    },
    badge: {
      display: 'flex',
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'center',
      alignContent: 'center',
      alignItems: 'center',
      position: 'absolute',
      top: -radius,
      right: -radius,
      fontWeight: typography.fontWeight,
      fontSize: radius,
      width: radius2x,
      height: radius2x,
      borderRadius: '50%',
      backgroundColor: palette.color,
      color: palette.textColor
    },
    primary: {
      backgroundColor: palette.primary[500],
      color: palette.getContrastText(palette.primary[500])
    },
    accent: {
      backgroundColor: palette.accent.A200,
      color: palette.getContrastText(palette.accent.A200)
    }
  };
});

/**
 *
 * ```jsx
 * <Badge badgeContent={4}>
 *   <Icon>folder</Icon>
 * </Badge>
 * ```
 */
function Badge(props, context) {
  var _classNames2;

  var badgeClassNameProp = props.badgeClassName,
      badgeContent = props.badgeContent,
      classNameProp = props.className,
      children = props.children,
      primary = props.primary,
      accent = props.accent,
      other = _objectWithoutProperties(props, ['badgeClassName', 'badgeContent', 'className', 'children', 'primary', 'accent']);

  var classes = context.styleManager.render(styleSheet);
  var className = (0, _classnames2.default)(_defineProperty({}, classes.root, true), classNameProp);
  var badgeClassName = (0, _classnames2.default)((_classNames2 = {}, _defineProperty(_classNames2, classes.badge, true), _defineProperty(_classNames2, classes.primary, primary), _defineProperty(_classNames2, classes.accent, accent), _classNames2), badgeClassNameProp);

  return _react2.default.createElement(
    'div',
    _extends({ className: className }, other),
    children,
    _react2.default.createElement(
      'span',
      { className: badgeClassName },
      badgeContent
    )
  );
}

Badge.propTypes = {
  /**
   * If true, the badge will use the accent badge colors.
   */
  accent: _react.PropTypes.bool,
  /**
   * The css class name of the badge element.
   */
  badgeClassName: _react.PropTypes.string,
  /**
   * This is the content rendered within the badge.
   */
  badgeContent: _react.PropTypes.node.isRequired,
  /**
   * The badge will be added relativelty to this node.
   */
  children: _react.PropTypes.node.isRequired,
  /**
   * The css class name of the root element.
   */
  className: _react.PropTypes.string,
  /**
   * If true, the badge will use the primary badge colors.
   */
  primary: _react.PropTypes.bool
};

Badge.defaultProps = {
  primary: false,
  accent: false
};

Badge.contextTypes = {
  styleManager: _customPropTypes2.default.muiRequired
};